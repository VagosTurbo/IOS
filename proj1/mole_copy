#!/bin/bash

#Autor: xseman06

export POSIXLY_CORRECT=yes

print_help(){
    echo "                                      Mole program"
    echo "USAGE:  [-h]                                          Prints help"
    echo "        [-g GROUP] FILE                             Sorts opened file into group"
    echo "        [-m][FILTERS] [DIRECTORY]                   When argument -m is typed, mole opens most opened file in directory"
    echo "        [FILTERS] [DIRECTORY]                       Opens last opened file in directory"
    echo "        list [FILTERS] [DIRECTORY]                  Prints list of opened files. Can be filtered by filters or directory"
    echo "        secret-log [-b DATE] [-a DATE] [DIRECTORY]  Makes a secret log in secret location. Can be filtered with filters or"
    echo "                                                    it can be specified to certain directory"
}

#choose editor for editing files
choose_editor(){
    if [ -z "${EDITOR}" ]; then
        if [ -z "${VISUAL}" ]; then
            EDITOR=vi
        else 
            EDITOR=${VISUAL}
        fi
    fi
}

#checks if utility real path is avaliable
check_realpath() {
    if ! command -v realpath &> /dev/null; then
        echo "utilita realpath chyba" >&2
        exit 1
    fi

}


#checks if variable DIRECTORY is empty if so, it is set to current directory and also it checks if directory really exists
dir_check(){
    #if dir is empty or if on dir place was written a filter
    if [ -z "${DIRECTORY}" ] || [ "${DIRECTORY:0:1}" == "-" ]; then
        DIRECTORY=$(pwd)
    fi
    if [ ! -d "${DIRECTORY}" ]; then
        echo "Directory does not exists" >&2
        exit 1
    fi
}

#finds last opened file from given directory and returns realpath of the file to REALPATH variable
last_opened_in_dir(){
    #if -g was switched, finding last opened file in the group
    if [ ${ARG_G} ]; then
        REALPATH=$(awk -F";" -v dir="${DIRECTORY}" -v group="${GROUP}" '{if($3==dir && $1==group )path=$2;}END{print path}' ${MOLE_RC})
    else
        REALPATH=$(awk -F";" -v dir="${DIRECTORY}" '{if($3==dir)path=$2;}END{print path}' ${MOLE_RC})
    fi
}
    
#finds most opened file from given directory and returns realpath of the file to REALPATH variable
most_opened_file(){
    REALPATH=$(awk -F ";" -v dir="${DIRECTORY}" -v after="${AFTER}" -v before="${BEFORE}"  '{if($5>=after && $5<=before) print $2}' ${MOLE_RC} | sort | uniq -c | sort -nr | head -n 1 | awk '{print $2}')
}

#finds most opened file from given directory and returns realpath of the file to REALPATH variable
most_opened_file_in_group(){
    REALPATH=$(awk -F ";" -v after="${AFTER}" -v before="${BEFORE}" -v group="${GROUP}" '{if($5>=after && $5<=before && $1==group) print $2}' ${MOLE_RC} | sort | uniq -c | sort -nr | head -n 1 | awk '{print $2}')
}

list(){
    # Read the FILENAME field into an array
    if [ ! ${ARG_G} ]; then
        readarray -t filenames <<< "$(awk -F';' -v dir="${DIRECTORY}" -v after="${AFTER}" -v before="${BEFORE}" '{if($3==dir && $5>=after && $5<=before) print $4}' ${MOLE_RC} | sort -u )"
    else
        readarray -t filenames <<< "$(awk -F';' -v group="${GROUP}" -v dir="${DIRECTORY}" -v after="${AFTER}" -v before="${BEFORE}" '{if($3==dir && $5>=after && $5<=before && $1==group) print $4}' ${MOLE_RC} | sort -u )"
    fi


    #getting length of longest file for indenting
    INDENTLENGTH=${#filenames[0]}

    for ((i = 0; i < ${#filenames[@]}; i++))
    do
        LENGTH=${#filenames[$i]}
        if [[ $LENGTH -gt $INDENTLENGTH ]]; then
            INDENTLENGTH=$LENGTH
        fi

    done
    INDENTLENGTH=$((INDENTLENGTH + 2))

    for ((i = 0; i < ${#filenames[@]}; i++))
    do
        filename=${filenames[$i]}
        #finds all groups that the file is in
        groups=$(awk -F';' -v filename="${filename}" -v after="${AFTER}" -v before="${BEFORE}" '{if($4 == filename && $5>=after && $5<=before) print $1}' ${MOLE_RC} | sort -u | paste -sd,)
        
        #if file is in any group, remove "-"
        if [[ ${#groups} > 1 && "${groups:0:1}" == "-" ]]; then
            groups="${groups:2}"
        fi
        #prints the filename and groups that it was opened with
        printf "%-*s%s\n" "$INDENTLENGTH" "$filename:" "$groups"

    done

}

#opens file and log it to mole_rc
edit_and_log(){
    if [ -z "$REALPATH" ]; then
        echo "Chyba, subor sa nenasiel" >&2
        exit 1
    fi
    FILE=$(basename "${REALPATH}")
    eval $EDITOR $REALPATH
    echo ${GROUP}";"${REALPATH}";"${DIRECTORY}";"${FILE}";"${DATE}"_"${TIME}>> ${MOLE_RC}
}

#if path was set renaming variable FILE
filename_check(){
    if [[ ${FILE:0:1} == "/" ]] || [[ ${FILE:0:1} == "~" ]]; then
        FILE=$(basename ${FILE})
    fi
}

#checks if directory was ever opened through mole
was_dir_edited(){
    DIRCOUNT=""
    DIRCOUNT=$(awk -F ";" -v dir="$DIRECTORY" '{if($3==dir) print 1}' ${MOLE_RC})
    if [[ -z $DIRCOUNT ]]; then
        echo "Subor este nebol editovany" >&2
        exit 1
    fi
}

#checking if date was inputed correctly
date_check(){
    if ! echo "$DATECHECK" | grep -qE '^[0-9]{4}-[0-3][1-9]-[0-3][1-9]$'; then
        echo "$DATECHECK is not in the format YYYY-MM-DD" >&2
        exit 1
    fi
}

#generate secret log and save it to .mole directory
secretlog(){
    USER=$USER
    DIRSECRET="/home/"$USER"/.mole/"
    REALPATHSECRET=$DIRSECRET"log_"$USER"_"$DATE"_"$TIME".bz2"
    CONTENT=
    #if directory wasnt inputed log all files within time filters
    if [ -z "${DIRECTORY}" ]; then
        readarray -t realpaths <<< "$(awk -F';' -v after="${AFTER}" -v before="${BEFORE}" '{if($5>=after && $5<=before) print $2}' ${MOLE_RC} | sort -u)"
    else
        readarray -t realpaths <<< "$(awk -F';' -v dir="${DIRECTORY}" -v after="${AFTER}" -v before="${BEFORE}" '{if($3==dir && $5>=after && $5<=before) print $2}' ${MOLE_RC} | sort -u )"
    fi

    #cycles through list of realpaths
    for rpath in "${realpaths[@]}"
    do
        #finding all groups that the realpath is in
        times=$(awk -F';' -v rpath="${rpath}" -v after="${AFTER}" -v before="${BEFORE}" '{if($2 == rpath && $5>=after && $5<=before) print $5}' ${MOLE_RC} | sort -u | paste -sd";")
        CONTENT=$(printf '%s;%s\n' "$rpath" "$times")
        #printing to secret log
        echo "$CONTENT" | bzip2 >> $REALPATHSECRET
    done
}

check_realpath

#variables for possible editors and choosing editor
EDITOR=nano
VISUAL=
choose_editor

FILE=
GROUP="-"
DIRECTORY=$(pwd)
DATE=$(date +%Y-%m-%d)
TIME=$(date +%H-%M-%S)
AFTER="0000_01_01"
BEFORE="9999_31_31"

#if user didnt inputed anything open last edited file in this dir
if [ $# -eq 0 ]; then
    last_opened_in_dir
    if [ -z ${REALPATH} ]; then
        echo "ziaden subor este nebol editovany" >&2
        exit 1
    fi
    edit_and_log
    exit 0
fi

ARG_G=
ARG_M=
ARG_LIST=
ARG_SL=

#processing arguments
while [ "$#" -gt 0 ]; do
    FILE=$1
    case $1 in
    "-h") 
        print_help
        exit 0
        ;;
    "-g")
        ARG_G=true
        GROUP=$2
        FILE_G=$3
        ;;
    "-m")
        ARG_M=true
        if [ -z $2 ]; then
            DIRECTORY=$2
        elif [ "$2" == "-g" ] || [ "$2" == "-a" ] || [ "$2" == "-b" ]; then
            DIRECTORY=$4
            if [ "$4" == "-g" ] || [ "$4" == "-a" ] || [ "$4" == "-b" ]; then
                DIRECTORY=$6
            fi
        else
            DIRECTORY=$3
        fi
        ;;
    "list")
        ARG_LIST=true
        if [ ! -z $2 ]; then
            DIRECTORY=$2
        fi
        ;;
    "-a")
        DATECHECK=$2
        date_check
        AFTER=${DATECHECK}
        ;;
    "-b")
        DATECHECK=$2
        date_check
        BEFORE=${DATECHECK}
        ;;
    "secret-log")
        ARG_SL=true
        if [ "$2" == "-a" ] || [ "$2" == "-b" ]; then 
            if ["$4" == "-a"] || [ "$4" == "-b" ]; then
                DIRECTORY=$6
            fi
            DIRECTORY=$4
        fi
        DIRECTORY=$2
        ;;
    esac
    shift
done

#list switch on
if [ ${ARG_LIST} ]; then
    dir_check
    was_dir_edited
    list
    exit 0
fi

#-m switch on
if [ ${ARG_M} ]; then
    dir_check
    was_dir_edited
    most_opened_file
    FILE=$REALPATH
    filename_check
    edit_and_log
    exit 0
fi

#-g switch on
if [ ${ARG_G} ]; then
    #if -g was used to open last opened file in the group
    if [ -z "${FILE_G}" ]; then
        last_opened_in_dir
        edit_and_log
        exit 0
    fi
    #opens and logs file in group
    REALPATH=$(realpath "$FILE")
    DIRECTORY=$(dirname "$REALPATH")
    filename_check
    edit_and_log
    exit 0
fi

#if user inputed directory, opens last edited file in certain directory
if [ -d "${FILE}" ]; then
    DIRECTORY="${FILE}"
    was_dir_edited
    last_opened_in_dir
    FILE=${REALPATH}
fi

#secret-log switch on, generates secret log
if [ ${ARG_SL} ]; then
    secretlog
    exit 0
fi

REALPATH=$(realpath "$FILE")
DIRECTORY=$(dirname "$REALPATH")
filename_check
edit_and_log
exit 0